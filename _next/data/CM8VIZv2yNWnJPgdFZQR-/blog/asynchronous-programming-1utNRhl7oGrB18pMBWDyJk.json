{"pageProps":{"blogDetail":{"metadata":{"tags":[{"sys":{"type":"Link","linkType":"Tag","id":"javascript"}}]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"zdhzm3gdml81"}},"id":"1utNRhl7oGrB18pMBWDyJk","type":"Entry","createdAt":"2023-02-22T09:18:12.803Z","updatedAt":"2023-02-22T10:27:22.892Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":5,"contentType":{"sys":{"type":"Link","linkType":"ContentType","id":"blogPost"}},"locale":"en-US"},"fields":{"title":"Asynchronous Programming","slug":"asynchronous-programming","publishedDate":"2023-02-22T00:00+07:00","thumbnail":{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"zdhzm3gdml81"}},"id":"504rzUckM1uTK7D4B9tQPJ","type":"Asset","createdAt":"2023-02-18T07:03:59.918Z","updatedAt":"2023-02-18T07:03:59.918Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"locale":"en-US"},"fields":{"title":"Javascript","description":"","file":{"url":"//images.ctfassets.net/zdhzm3gdml81/504rzUckM1uTK7D4B9tQPJ/2f2355c698c85aa82c343b5fe4fa17c1/JavaScript-logo.png","details":{"size":10268,"image":{"width":1052,"height":1052}},"fileName":"JavaScript-logo.png","contentType":"image/png"}}},"body":{"nodeType":"document","data":{},"content":[{"nodeType":"heading-2","data":{},"content":[{"nodeType":"text","value":"1. Blocking and non-blocking ","marks":[],"data":{}}]},{"nodeType":"paragraph","data":{},"content":[{"nodeType":"text","value":"• Blocking: like some c/c++ languages... the code is executed from top to bottom from left to right. Some works will be waiting for a long time such as reading, and writing files, ...","marks":[],"data":{}}]},{"nodeType":"paragraph","data":{},"content":[{"nodeType":"text","value":"• Non-blocking: in javascript code will still run from top to bottom from left to right but there will be some tasks such as timeout, ajax, and DOM,..., these tasks in javascript will not execute directly. it will be passed to the web API to process and return a callback function, the callback functions will be executed later","marks":[],"data":{}}]},{"nodeType":"heading-2","data":{},"content":[{"nodeType":"text","value":"2. Asynchronous Programming","marks":[],"data":{}}]},{"nodeType":"paragraph","data":{},"content":[{"nodeType":"text","value":"• Both JavaScript in the browser, and in Node.js, are single-threaded.","marks":[],"data":{}}]},{"nodeType":"paragraph","data":{},"content":[{"nodeType":"text","value":"• In synchronous programs, if you have two lines of code (L1\nfollowed by L2), then L2 cannot begin running until L1 has\nfinished executing.","marks":[],"data":{}}]},{"nodeType":"paragraph","data":{},"content":[{"nodeType":"text","value":"• In asynchronous programs, you can have two lines of code (L1\nfollowed by L2), where L1 schedules some tasks to be run in the\nfuture, but L2 runs before that task completes.","marks":[],"data":{}}]},{"nodeType":"paragraph","data":{},"content":[{"nodeType":"text","value":"• Call Stack","marks":[],"data":{}}]},{"nodeType":"embedded-asset-block","data":{"target":{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"zdhzm3gdml81"}},"id":"7FjN1aqLoKDNWpDu4drWUc","type":"Asset","createdAt":"2023-02-22T09:10:46.298Z","updatedAt":"2023-02-22T09:10:46.298Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"locale":"en-US"},"fields":{"title":"Screenshot 2023-02-22 at 16.10.11","description":"","file":{"url":"//images.ctfassets.net/zdhzm3gdml81/7FjN1aqLoKDNWpDu4drWUc/80155ebe3c5494db73593f771d2793ec/Screenshot_2023-02-22_at_16.10.11.png","details":{"size":474521,"image":{"width":1344,"height":674}},"fileName":"Screenshot 2023-02-22 at 16.10.11.png","contentType":"image/png"}}}},"content":[]},{"nodeType":"paragraph","data":{},"content":[{"nodeType":"text","value":"• Web Browser API","marks":[],"data":{}}]},{"nodeType":"embedded-asset-block","data":{"target":{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"zdhzm3gdml81"}},"id":"2bMEHlcPLrBVv0MVZP6kqG","type":"Asset","createdAt":"2023-02-22T09:11:56.510Z","updatedAt":"2023-02-22T09:11:56.510Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"locale":"en-US"},"fields":{"title":"Screenshot 2023-02-22 at 16.11.22","description":"","file":{"url":"//images.ctfassets.net/zdhzm3gdml81/2bMEHlcPLrBVv0MVZP6kqG/f32cb6d85de1053508f7fb359a9bd453/Screenshot_2023-02-22_at_16.11.22.png","details":{"size":52820,"image":{"width":628,"height":282}},"fileName":"Screenshot 2023-02-22 at 16.11.22.png","contentType":"image/png"}}}},"content":[]},{"nodeType":"paragraph","data":{},"content":[{"nodeType":"text","value":"• Event Loop: The reality is that all JavaScript executes\nsynchronously - it's the event loop that allows you to queue up\nan action that won't take place until the loop is available some\ntime after the code that queued the action has finished\nexecuting.","marks":[],"data":{}}]},{"nodeType":"embedded-asset-block","data":{"target":{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"zdhzm3gdml81"}},"id":"3dEBnbcOqDoFby1Am6cUNs","type":"Asset","createdAt":"2023-02-22T09:14:21.057Z","updatedAt":"2023-02-22T09:14:21.057Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"locale":"en-US"},"fields":{"title":"Screenshot 2023-02-22 at 16.13.11","description":"","file":{"url":"//images.ctfassets.net/zdhzm3gdml81/3dEBnbcOqDoFby1Am6cUNs/baf3885a1cec444a3bce48b0962604f9/Screenshot_2023-02-22_at_16.13.11.png","details":{"size":130837,"image":{"width":1226,"height":1046}},"fileName":"Screenshot 2023-02-22 at 16.13.11.png","contentType":"image/png"}}}},"content":[]},{"nodeType":"paragraph","data":{},"content":[{"nodeType":"text","value":"• Callback:","marks":[],"data":{}}]},{"nodeType":"paragraph","data":{},"content":[{"nodeType":"text","value":"- Pros: Easy to understand (only for simple callback function).\n- Cons: Error handling becomes more complicated, Composition is more\ncomplicated (Callback hell)","marks":[],"data":{}}]},{"nodeType":"embedded-asset-block","data":{"target":{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"zdhzm3gdml81"}},"id":"28kPNaOSHAG682v4a8yTfD","type":"Asset","createdAt":"2023-02-22T09:16:02.391Z","updatedAt":"2023-02-22T09:16:02.391Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"locale":"en-US"},"fields":{"title":"g9t2l43uyqv4243pocsg","description":"","file":{"url":"//images.ctfassets.net/zdhzm3gdml81/28kPNaOSHAG682v4a8yTfD/5892d3271e418d387a20555eca0aa5df/g9t2l43uyqv4243pocsg.webp","details":{"size":97576,"image":{"width":1600,"height":900}},"fileName":"g9t2l43uyqv4243pocsg.webp","contentType":"image/webp"}}}},"content":[]},{"nodeType":"paragraph","data":{},"content":[{"nodeType":"text","value":"• AJAX","marks":[],"data":{}}]},{"nodeType":"embedded-asset-block","data":{"target":{"metadata":{"tags":[]},"sys":{"space":{"sys":{"type":"Link","linkType":"Space","id":"zdhzm3gdml81"}},"id":"77o1Ab2RhnV0PXlZYBGAej","type":"Asset","createdAt":"2023-02-22T09:17:10.950Z","updatedAt":"2023-02-22T09:17:10.950Z","environment":{"sys":{"id":"master","type":"Link","linkType":"Environment"}},"revision":1,"locale":"en-US"},"fields":{"title":"Screenshot 2023-02-22 at 16.16.44","description":"","file":{"url":"//images.ctfassets.net/zdhzm3gdml81/77o1Ab2RhnV0PXlZYBGAej/39dd8700941728b425a597eb0ac163cd/Screenshot_2023-02-22_at_16.16.44.png","details":{"size":147085,"image":{"width":1054,"height":544}},"fileName":"Screenshot 2023-02-22 at 16.16.44.png","contentType":"image/png"}}}},"content":[]},{"nodeType":"paragraph","data":{},"content":[{"nodeType":"text","value":"• Asynchronous programming makes it possible to express waiting for\nlong-running actions without freezing the program during these\nactions.","marks":[],"data":{}}]},{"nodeType":"paragraph","data":{},"content":[{"nodeType":"text","value":"• JavaScript environments typically implement this style of\nprogramming using callbacks, functions that are called when the\nactions complete.\n• An event loop schedules such callbacks to be called when\nappropriate, one after the other, so that their execution does not\noverlap.","marks":[],"data":{}}]},{"nodeType":"paragraph","data":{},"content":[{"nodeType":"text","value":"","marks":[],"data":{}}]},{"nodeType":"paragraph","data":{},"content":[{"nodeType":"text","value":"• http://speakingjs.com/es5/index.html","marks":[],"data":{}}]},{"nodeType":"paragraph","data":{},"content":[{"nodeType":"text","value":"\n• http://exploringjs.com/es6/index.html","marks":[],"data":{}}]},{"nodeType":"paragraph","data":{},"content":[{"nodeType":"text","value":"\n• http://exploringjs.com/es2016-es2017/ch_async-functions.html","marks":[],"data":{}}]},{"nodeType":"paragraph","data":{},"content":[{"nodeType":"text","value":"\n• http://exploringjs.com/es2018-es2019/toc.html","marks":[],"data":{}}]},{"nodeType":"paragraph","data":{},"content":[{"nodeType":"text","value":"\n• http://eloquentjavascript.net/","marks":[],"data":{}}]},{"nodeType":"paragraph","data":{},"content":[{"nodeType":"text","value":"\n• https://github.com/getify/You-Dont-Know-JS#titles","marks":[],"data":{}}]},{"nodeType":"paragraph","data":{},"content":[{"nodeType":"text","value":"","marks":[],"data":{}}]},{"nodeType":"paragraph","data":{},"content":[{"nodeType":"text","value":"","marks":[],"data":{}}]}]}}}},"__N_SSG":true}